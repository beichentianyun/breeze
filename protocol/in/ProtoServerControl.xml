<?xml version="1.0" encoding="UTF-8"?>

<ProtoTraits>
  <MinNo>10</MinNo>
  <MaxNo>1000</MaxNo>
  <UseLog4z>0</UseLog4z>
</ProtoTraits>


<Proto>


  <!-- 每个服务在连接其他节点或其他节点连接到己方时 必须在第一时间发送该协议进行节点认证 -->
  <proto from="DT" to="OS" name="DirectServerAuth" desc= "服务节点认证">
    <member name="srcNode" type="ui32"   desc="当前服务节点"/>
    <member name="srcIndex" type="ui32"   desc="当前服务节点索引ID"/>
  </proto>

  <!-- 内部服务节点存活脉冲 -->
  <proto from="DT" to="OS" name="DirectServerPulse" desc= "服务节点生命脉冲">
    <member name="srcNode" type="ui32"   desc="当前服务节点"/>
    <member name="srcIndex" type="ui32"   desc="当前服务节点索引ID"/>
  </proto>

  <!-- 一个经过center节点的标准内部协议格式  包头长度+路由协议ID+路由信息数据+原始协议ID+SessionDEBUG+原始信息数据 -->
  <!-- 例如: 客户端发上来的包要经过添加SessionDEBUG,添加路由信息发送到center, 
        center解包路由信息并根据路由数据获知目标节点服务, 然后去掉路由协议和路由信息 把'原始协议ID+SessionDEBUG+原始信息数据'路由至指定目标节点服务,
        目标服务处理协议首先从流中流出SesssionDEBUG 其次才是原始信息数据,  返回协议参照请求协议流程 -->
  <!-- 备注: 如果协议为广播, 或者玩家与玩家通讯 在推送/返回协议时 应忽略或者重新设置SessionDEBUG的信息内容 -->

  <const name="RT_SPECIFIED" value="0" type="ui16"  desc="指定dstIndex为路由目标"/>
  <const name="RT_ANY" value="1" type="ui16"  desc="(任意)符合路由目标类型的任意一个节点为路由目标"/>
  <const name="RT_RAND" value="2" type="ui16"  desc="(随机)符合路由目标类型的任意一个节点为路由目标"/>
  <const name="RT_BROADCAST" value="3" type="ui16"  desc="(广播)符合路由目标类型的所有节点为路由目标"/>
  <const name="RT_WITHOUT_SPECIFIED" value="0" type="ui16"  desc="(广播)指定dstIndex为以外的所有节点为路由目标"/>
  <proto from="RT" to="OS" name="RouteToOtherServer" desc= "路由给其他服务">
    <member name="dstNode" type="ui32"   desc=""/>
    <member name="routerType" type="ui32"   desc="RT_SPECIFIED为指定dstIndex路由, RT_RAND为任意一个, RT_BROADCAST为广播"/>
    <member name="dstIndex" type="ui32"   desc="optional"/>
  </proto>


  <proto from="LS" to="AS" name="CharacterLogin" desc= "玩家登录消息, 广播给所有agent">
  </proto>
  <proto from="AS" to="LS" name="CharacterLogout" desc= "玩家登出消息, 广播给所有logic">
  </proto>


</Proto>

